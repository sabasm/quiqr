// src/repository/UserRepository.ts
import { PrismaClient } from '@prisma/client';
import { User } from '../entities/User';

export class UserRepository {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  async findAll(): Promise<User[]> {
    return this.prisma.user.findMany();
  }

  async findById(id: string): Promise<User | null> {
    return this.prisma.user.findUnique({ where: { id } });
  }

  async findByEmail(email: string): Promise<User | null> {
    return this.prisma.user.findUnique({ where: { email } });
  }

  async create(data: Partial<User>): Promise<User> {
    return this.prisma.user.create({ data });
  }

  async update(id: string, data: Partial<User>): Promise<User | null> {
    return this.prisma.user.update({ where: { id }, data });
  }

  async delete(id: string): Promise<boolean> {
    await this.prisma.user.delete({ where: { id } });
    return true;
  }
}

// src/repository/AbstractRepository.ts
import { PrismaClient } from '@prisma/client';
import { Entity } from '../entities/entity.abstract';

export abstract class AbstractRepository<T extends Entity> {
  protected prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  abstract findAll(): Promise<T[]>;
  abstract findById(id: string): Promise<T | null>;
  abstract create(data: Partial<T>): Promise<T>;
  abstract update(id: string, data: Partial<T>): Promise<T | null>;
  abstract delete(id: string): Promise<boolean>;
}

// src/services/SubscriptionService.ts
import { PrismaClient } from '@prisma/client';
import { Subscription } from '../entities/Subscription';

export class SubscriptionService {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  async createSubscription(data: Partial<Subscription>): Promise<Subscription> {
    return this.prisma.subscription.create({ data });
  }

  async updateSubscription(id: string, data: Partial<Subscription>): Promise<Subscription | null> {
    return this.prisma.subscription.update({ where: { id }, data });
  }

  async findSubscriptionByUserId(userId: string): Promise<Subscription | null> {
    return this.prisma.subscription.findUnique({ where: { userId } });
  }

  async findAllSubscriptions(): Promise<Subscription[]> {
    return this.prisma.subscription.findMany();
  }
}

// src/services/UserService.ts
import { PrismaClient, User } from '@prisma/client';
import { hash } from 'bcrypt';

export class UserService {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  async createUser(data: Partial<User>): Promise<User> {
    const passwordHash = await hash(data.password, 10);
    return this.prisma.user.create({
      data: {
        ...data,
        password: passwordHash,
      },
    });
  }

  async getUserById(id: string): Promise<User | null> {
    return this.prisma.user.findUnique({ where: { id } });
  }

  async getUserByEmail(email: string): Promise<User | null> {
    return this.prisma.user.findUnique({ where: { email } });
  }

  async updateUser(id: string, data: Partial<User>): Promise<User | null> {
    return this.prisma.user.update({ where: { id }, data });
  }

  async deleteUser(id: string): Promise<boolean> {
    await this.prisma.user.delete({ where: { id } });
    return true;
  }

  async getAllUsers(): Promise<User[]> {
    return this.prisma.user.findMany();
  }
}

// src/services/Auth0Service.ts
import { Auth0Client } from '@auth0/auth0-spa-js';
import { auth0Config } from '../config/auth0';

export class Auth0Service {
  private auth0Client: Auth0Client;

  constructor() {
    this.auth0Client = new Auth0Client({
      domain: auth0Config.domain,
      clientId: auth0Config.clientId,
    });
  }

  async getUser() {
    return this.auth0Client.getUser();
  }

  login() {
    return this.auth0Client.loginWithRedirect();
  }

  logout() {
    return this.auth0Client.logout();
  }
}

// src/utils/securityUtils.ts
import jwt from 'jsonwebtoken';

export const verifyToken = (token: string): boolean => {
  try {
    jwt.verify(token, process.env.JWT_SECRET as string);
    return true;
  } catch (error) {
    return false;
  }
};

// src/providers/SecurityProvider.tsx
import React from 'react';
import { useSecurityContext } from '../context/SecurityContext';

export const SecurityProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const context = useSecurityContext();
  return <>{children}</>;
};

// src/hooks/useSecurity.ts
import { useSecurityContext } from '../context/SecurityContext';

export const useSecurity = () => {
  const context = useSecurityContext();
  return context;
};

// src/context/SecurityContext.tsx
import React, { createContext, useState, useContext } from 'react';

interface SecurityContextType {
  isSecure: boolean;
  setSecure: (value: boolean) => void;
}

const SecurityContext = createContext<SecurityContextType | undefined>(undefined);

export const SecurityProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {
  const [isSecure, setIsSecure] = useState(false);

  const setSecure = (value: boolean) => {
    setIsSecure(value);
  };

  return (
    <SecurityContext.Provider value={{ isSecure, setSecure }}>
      {children}
    </SecurityContext.Provider>
  );
};

export const useSecurityContext = () => {
  const context = useContext(SecurityContext);
  if (context === undefined) {
    throw new Error('useSecurityContext must be used within a SecurityProvider');
  }
  return context;
};

// src/shared/components/Modal.tsx
import React from 'react';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
}

export const Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
      <div className="bg-white p-6 rounded-lg">
        <h2 className="text-xl font-bold mb-4">{title}</h2>
        <div>{children}</div>
        <button onClick={onClose} className="mt-4 px-4 py-2 bg-gray-200 rounded">Close</button>
      </div>
    </div>
  );
};

// src/shared/components/Input.tsx
import React from 'react';

interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label: string;
  errorMessage?: string;
}

export const Input: React.FC<InputProps> = ({ label, id, errorMessage, ...props }) => {
  return (
    <div className="mb-4">
      <label htmlFor={id} className="block text-gray-700 text-sm font-bold mb-2">
        {label}
      </label>
      <input
        id={id}
        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
        {...props}
      />
      {errorMessage && <p className="text-red-500 text-xs italic">{errorMessage}</p>}
    </div>
  );
};

// src/components/ErrorBoundary.tsx
import React, { Component, ErrorInfo, ReactNode } from 'react';
import LoggerService from '../services/LoggerService';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
}

export class ErrorBoundary extends Component<Props, State> {
  private logger: LoggerService;

  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
    this.logger = new LoggerService();
  }

  static getDerivedStateFromError(_: Error): State {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    this.logger.error('Error caught by ErrorBoundary:', { error, errorInfo });
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong. Please try again later.</h1>;
    }

    return this.props.children;
  }
}

// src/config/axiosConfig.ts
import axios from 'axios';
import { environment } from './environment';

export const axiosConfig = axios.create({
  baseURL: environment.apiUrl,
  timeout: 10000,
});
